-- ink game habibi
if not getgenv().shared then
    getgenv().shared = {}
end

if not getgenv().Ronix_loaded then
    getgenv().Ronix_loaded = true
else
    local suc = pcall(function()
        shared.Ronix_InkGame_Library:Unload()
    end)
    if not suc then
        return 
    end
end

local WindUI = loadstring(game:HttpGet("https://raw.githubusercontent.com/RONIX-HUB/WindUI/refs/heads/main/dist/main.lua"))()

local Services = setmetatable({}, {
    __index = function(self, key)
        local suc, service = pcall(game.GetService, game, key)
        if suc and service then
            self[key] = service
            return service
        else
            warn(`[Services] Warning: "{key}" is not a valid Roblox service.`)
            return nil
        end
    end
})

local Players = Services.Players
local ReplicatedStorage = Services.ReplicatedStorage
local RunService = Services.RunService
local UserInputService = Services.UserInputService
local TweenService = Services.TweenService
local HttpService = Services.HttpService
local VirtualUser = Services.VirtualUser
local Lighting = Services.Lighting
local StarterGui = Services.StarterGui

local lplr = Players.LocalPlayer
local localPlayer = lplr
local camera = workspace.CurrentCamera

local Maid = {}
Maid.__index = Maid

function Maid.new()
    return setmetatable({Tasks = {}}, Maid)
end

function Maid:Add(task)
    if typeof(task) == "RBXScriptConnection" or (typeof(task) == "Instance" and task.Destroy) or typeof(task) == "function" then
        table.insert(self.Tasks, task)
    end
    return task
end

function Maid:Clean()
    for _, task in ipairs(self.Tasks) do
        pcall(function()
            if typeof(task) == "RBXScriptConnection" then
                task:Disconnect()
            elseif typeof(task) == "Instance" then
                task:Destroy()
            elseif typeof(task) == "function" then
                task()
            end
        end)
    end
    table.clear(self.Tasks)
    self.Tasks = {}
end

local Script = {
    GameState = "unknown",
    GameStateChanged = Instance.new("BindableEvent"),
    Services = Services,
    Maid = Maid.new(),
    ESPTable = {
        Player = {},
        Seeker = {},
        Hider = {},
        Guard = {},
        Door = {},
        None = {},
        Key = {},
    },
    Temp = {
        AntiAFKConnection = nil,
        AntiAdminConnection = nil,
        ESPScanConnection = nil,
        HitboxConnection = nil,
        KillAuraConnection = nil,
        OldGravity = workspace.Gravity,
        OldLightingSettings = nil,
        FlyBodyVelocity = nil,
        FlyBodyAngularVelocity = nil,
        FlyConnection = nil,
        NoClipConnection = nil,
        InfiniteJumpConnection = nil,
        SpeedConnection = nil,
    },
    Connections = {},
    Functions = {}
}

local Toggles = {}

local SHOW_NOTIFICATIONS = false

local States = {}

local ESP_META = {
    PlayerESP = {
        Text = "Player",
        Color = Color3.fromRGB(255, 255, 255),
        Enabled = false,
        checktype = function(obj)
            return obj:IsA("Model") and obj:FindFirstChild("Humanoid") and obj:FindFirstChild("HumanoidRootPart") and obj ~= lplr.Character
        end
    },
    GuardESP = {
        Text = "Guard",
        Color = Color3.fromRGB(255, 0, 0),
        Enabled = false,
        checktype = function(obj)
            return obj.Name:find("Guard") or obj.Name:find("NPC") or obj.Name:find("Security")
        end
    },
    HiderESP = {
        Text = "Hider",
        Color = Color3.fromRGB(0, 255, 0),
        Enabled = false,
        checktype = function(obj)
            return obj.Name:find("Hider")
        end
    },
    SeekerESP = {
        Text = "Seeker",
        Color = Color3.fromRGB(255, 255, 0),
        Enabled = false,
        checktype = function(obj)
            return obj.Name:find("Seeker")
        end
    },
    KeyESP = {
        Text = "Key",
        Color = Color3.fromRGB(255, 215, 0),
        Enabled = false,
        checktype = function(obj)
            return obj.Name:find("Key") or obj.Name:find("Card")
        end
    },
    DoorESP = {
        Text = "Door",
        Color = Color3.fromRGB(139, 69, 19),
        Enabled = false,
        checktype = function(obj)
            return obj.Name:find("Door") or obj.Name:find("Exit")
        end
    }
}

function Script.Functions.Alert(text, duration, forceShow)
    if not SHOW_NOTIFICATIONS and not forceShow then
        return
    end
    
    duration = duration or 5
    WindUI:Notify({
        Title = "Ronix",
        Content = text,
        Duration = duration,
    })
end

function Script.Functions.Warn(message: string)
    warn("WARN -Ronix:", message)
end

function Script.Functions.GetHumanoid()
    if lplr.Character and lplr.Character:FindFirstChild("Humanoid") then
        return lplr.Character.Humanoid
    end
    return nil
end

function Script.Functions.GetRootPart()
    if lplr.Character then
        return lplr.Character:FindFirstChild("HumanoidRootPart") or lplr.Character:FindFirstChild("Torso")
    end
    return nil
end

local tools = {"Fork", "Bottle", "Knife"}
function Script.Functions.GetFork()
    local res
    for _, index in pairs(tools) do
        local tool = lplr.Character:FindFirstChild(index) or lplr:FindFirstChild("Backpack") and lplr.Backpack:FindFirstChild(index)
        if tool then
            res = tool
            break
        end
    end
    return res
end

function Script.Functions.FireForkRemote()
    local fork = Script.Functions.GetFork()
    if not fork then return end

    if fork.Parent.Name == "Backpack" then
        lplr.Character.Humanoid:EquipTool(fork)
    end

    fork = Script.Functions.GetFork()
    if not fork then return end

    local args = {
        "UsingMoveCustom",
        fork,
        [4] = {
            Clicked = true
        }
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UsedTool"):FireServer(unpack(args))

    local args = {
        "UsingMoveCustom",
        fork,
        true,
        {
            Clicked = true
        }
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("UsedTool"):FireServer(unpack(args))
end

Script.Functions.SafeRequire = function(module)
    if Script.Temp[tostring(module)] then return Script.Temp[tostring(module)] end
    local suc, err = pcall(function()
        return require(module)
    end)
    if not suc then
        warn("[SafeRequire]: Failure loading "..tostring(module).." ("..tostring(err)..")")
    else
        Script.Temp[tostring(module)] = err
    end
    return suc and err
end

Script.Functions.ExecuteClick = function()
    local args = {
        "Clicked"
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Replication"):WaitForChild("Event"):FireServer(unpack(args))    
end

Script.Functions.CompleteDalgonaGame = function()
    Script.Functions.ExecuteClick()
    local args = {
        {
            Completed = true
        }
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("DALGONATEMPREMPTE"):FireServer(unpack(args))
end

Script.Functions.PullRope = function(perfect)
    local args = {
        {
            PerfectQTE = true
        }
    }
    game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("TemporaryReachedBindable"):FireServer(unpack(args))
end

local EffectsModule
Script.Functions.OnLoad = function()
    EffectsModule = EffectsModule or Script.Functions.SafeRequire(ReplicatedStorage.Modules.Effects) or {
        AnnouncementTween = function(args)
            Script.Functions.Alert(args.AnnouncementDisplayText, args.DisplayTime)
        end
    }
end

function Script.Functions.EffectsNotification(text, dur)
    EffectsModule = EffectsModule or Script.Functions.SafeRequire(ReplicatedStorage.Modules.Effects) or {
        AnnouncementTween = function(args)
            Script.Functions.Alert(args.AnnouncementDisplayText, args.DisplayTime)
        end
    }

    dur = dur or 5
    text = tostring(text)

    EffectsModule.AnnouncementTween({
        AnnouncementOneLine = true,
        FasterTween = true,
        DisplayTime = dur,
        AnnouncementDisplayText = text
    })
end

Script.Functions.BypassRagdoll = function()
    local Players = game:GetService("Players")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local SharedFunctions = Script.Functions.SafeRequire(ReplicatedStorage.Modules.SharedFunctions)

    local LocalPlayer = Players.LocalPlayer
    local Character = LocalPlayer.Character
    if not Character then return end
    local Humanoid = Character:FindFirstChild("Humanoid")
    local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")
    local Torso = Character:FindFirstChild("Torso")
    if not (Humanoid and HumanoidRootPart and Torso) then return end

    local function restoreHumanoidStates()
        Humanoid.PlatformStand = false
        Humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
        Humanoid:SetStateEnabled(Enum.HumanoidStateType.Jumping, true)
        for _, state in pairs({
            Enum.HumanoidStateType.FallingDown,
            Enum.HumanoidStateType.Seated,
            Enum.HumanoidStateType.Swimming,
            Enum.HumanoidStateType.Flying,
            Enum.HumanoidStateType.StrafingNoPhysics,
            Enum.HumanoidStateType.Ragdoll
        }) do
            Humanoid:SetStateEnabled(state, false)
        end
    end

    local function cleanupRagdoll()
        for _, obj in pairs(HumanoidRootPart:GetChildren()) do
            if obj:IsA("BallSocketConstraint") or obj.Name:match("^CacheAttachment") then
                obj:Destroy()
            end
        end

        local joints = {"Left Hip", "Left Shoulder", "Neck", "Right Hip", "Right Shoulder"}
        for _, jointName in pairs(joints) do
            local motor = Torso:FindFirstChild(jointName)
            if motor and motor:IsA("Motor6D") and not motor.Part0 then
                motor.Part0 = Torso
            end
        end

        for _, part in pairs(Character:GetChildren()) do
            if part:IsA("BasePart") and part:FindFirstChild("BoneCustom") then
                part.BoneCustom:Destroy()
            end
        end

        for _, folderName in pairs({"Ragdoll", "Stun", "RotateDisabled", "RagdollWakeupImmunity", "InjuredWalking"}) do
            local folder = Character:FindFirstChild(folderName)
            if folder then
                folder:Destroy()
            end
        end

        local LocalRagdolls = workspace.Effects:FindFirstChild("LocalRagdolls")
        if LocalRagdolls then
            local ragdollModel = LocalRagdolls:FindFirstChild(LocalPlayer.Name)
            if ragdollModel then
                ragdollModel:Destroy()
            end
        end
    end

    restoreHumanoidStates()
    cleanupRagdoll()
end

Script.Functions.FixCamera = function()
    if workspace.CurrentCamera then
        pcall(function()
            workspace.CurrentCamera:Destroy()
        end)
    end
    local new = Instance.new("Camera")
    new.Parent = workspace
    workspace.CurrentCamera = new
    new.CameraType = Enum.CameraType.Custom
    new.CameraSubject = lplr.Character.Humanoid
end

Script.Functions.RestoreVisibility = function(character)
    local humanoid = character:FindFirstChildOfClass("Humanoid")

    for _, part in pairs(character:GetDescendants()) do
        if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
            if part.Transparency >= 0.99 or part.LocalTransparencyModifier >= 0.99 then
                wasInvisible = true
                part.Transparency = 0
                part.LocalTransparencyModifier = 0
            end
        end
    end

    pcall(function()
        character.HumanoidRootPart.Transparency = 1
    end)

    for _, item in pairs(character:GetChildren()) do
        if item:IsA("Accessory") or item:IsA("Clothing") then
            if item:IsA("Accessory") then
                local handle = item:FindFirstChild("Handle")
                if handle and handle.Transparency >= 0.99 then
                    handle.Transparency = 0
                end
            end
        end
    end
end

Script.Functions.CheckPlayersVisibility = function()
    for _, player in pairs(Players:GetPlayers()) do
        if player.Character then
            Script.Functions.RestoreVisibility(player.Character)
        end
    end
end

function Script.Functions.DistanceFromCharacter(position: Instance | Vector3)
    if typeof(position) == "Instance" then
        position = position:GetPivot().Position
    end

    local rootPart = Script.Functions.GetRootPart()
    if not rootPart then
        return (camera.CFrame.Position - position).Magnitude
    end

    return (rootPart.Position - position).Magnitude
end

Script.Functions.JoinDiscordServer = function()
    local sInvite = "https://discord.gg/ronix"
    
    local function getInviteCode(sInvite)
        for i = #sInvite, 1, -1 do
            local char = sInvite:sub(i, i)
            if char == "/" then
                return sInvite:sub(i + 1, #sInvite)
            end
        end
        return sInvite
    end
    
    local function getInviteData(sInvite)
        local success, result = pcall(function()
            return HttpService:JSONDecode(request({
                Url = "https://ptb.discord.com/api/invites/".. getInviteCode(sInvite),
                Method = "GET"
            }).Body)
        end)
        if not success then
            warn("Failed to get invite data:\n".. result)
            return
        end
        return success, result
    end

    local success, result = getInviteData(sInvite)
    if success and result then
        request({
            Url = "http://127.0.0.1:6463/rpc?v=1",
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json",
                ["Origin"] = "https://discord.com"
            },
            Body = HttpService:JSONEncode({
                cmd = "INVITE_BROWSER",
                args = {
                    code = result.code
                },
                nonce = HttpService:GenerateGUID(false)
            })
        })
    end
    pcall(function()
        setclipboard("discord.gg/ronix")
    end)
    game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "RONIX Discord - discord.gg/ronix",
        Text = "Copied to clipboard (discord.gg/ronix)",
        Duration = 10,
    })
end

function Script.Functions.WinRLGL()
    if not lplr.Character then return end
    local call = Toggles.AntiFling and Toggles.AntiFling.Value
    if call and Script.Functions.DisableAntiFling then
        Script.Functions.DisableAntiFling()
    end
    lplr.Character:PivotTo(CFrame.new(Vector3.new(-100.8, 1030, 115)))
    if call and Script.Functions.EnableAntiFling then
        task.delay(0.5, Script.Functions.EnableAntiFling)
    end
end

function Script.Functions.TeleportSafe()
    if not lplr.Character then return end
    local call = Toggles.AntiFling and Toggles.AntiFling.Value
    if call and Script.Functions.DisableAntiFling then
        Script.Functions.DisableAntiFling()
    end
    lplr.Character:PivotTo(CFrame.new(Vector3.new(-108, 329.1, 462.1)))
    if call and Script.Functions.EnableAntiFling then
        task.delay(0.5, Script.Functions.EnableAntiFling)
    end
end

function Script.Functions.WinGlassBridge()
    if not lplr.Character then return end
    local call = Toggles.AntiFling and Toggles.AntiFling.Value
    if call and Script.Functions.DisableAntiFling then
        Script.Functions.DisableAntiFling()
    end
    lplr.Character:PivotTo(CFrame.new(Vector3.new(-203.9, 520.7, -1534.3485)))
    if call and Script.Functions.EnableAntiFling then
        task.delay(0.5, Script.Functions.EnableAntiFling)
    end
end

function Script.Functions.DisableAntiFling()
    if Toggles.AntiFling and Toggles.AntiFling.Value then
        Toggles.AntiFling.Value = false
    end
end

function Script.Functions.EnableAntiFling()
    if Toggles.AntiFling and not Toggles.AntiFling.Value then
        Toggles.AntiFling.Value = true
    end
end

function Script.Functions.AutoWin()
    if not Toggles.AutoWin or not Toggles.AutoWin.Value then return end
    
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj.Name:find("Exit") or obj.Name:find("Escape") or obj.Name:find("Win") then
            if obj:IsA("Part") and obj.Touched then
                local rootPart = Script.Functions.GetRootPart()
                if rootPart then
                    rootPart.CFrame = obj.CFrame
                    wait(0.1)
                end
            end
        end
    end
end

function Script.Functions.HandleAutowin()
    if not Toggles.AutoWin or not Toggles.AutoWin.Value then return end
    
    Script.Temp.AutoWinConnection = RunService.Heartbeat:Connect(function()
        if not Toggles.AutoWin or not Toggles.AutoWin.Value then
            if Script.Temp.AutoWinConnection then
                Script.Temp.AutoWinConnection:Disconnect()
                Script.Temp.AutoWinConnection = nil
            end
            return
        end
        
        local gameState = Script.GameState
        if gameState:find("RedLightGreenLight") then
            Script.Functions.WinRLGL()
        elseif gameState:find("GlassBridge") then
            Script.Functions.WinGlassBridge()
        else
            Script.Functions.AutoWin()
        end
    end)
end

function Script.Functions.CheckForAdmins()
    if not Toggles.AntiAdmin or not Toggles.AntiAdmin.Value then return end
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= lplr then
            local success, result = pcall(function()
                return player:GetRankInGroup(1)
            end)
            
            if success and result > 100 then
                Script.Functions.Alert("Admin detected: " .. player.Name, 5)
            end
        end
    end
end

Script.Functions.EnableRedLightGodmode = function()
    if not hookmetamethod then
        Script.Functions.Alert("Your executor doesn't support this :(", 5)
        return false
    end
    
    local TrafficLightImage = lplr.PlayerGui:FindFirstChild("ImpactFrames") and lplr.PlayerGui.ImpactFrames:FindFirstChild("TrafficLightEmpty")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local lastRootPartCFrame = nil
    local isGreenLight = true
    
    if TrafficLightImage and ReplicatedStorage:FindFirstChild("Effects") and ReplicatedStorage.Effects:FindFirstChild("Images") and ReplicatedStorage.Effects.Images:FindFirstChild("TrafficLights") and ReplicatedStorage.Effects.Images.TrafficLights:FindFirstChild("GreenLight") then
        isGreenLight = TrafficLightImage.Image == ReplicatedStorage.Effects.Images.TrafficLights.GreenLight.Image
    end
    
    local function updateState()
        local character = lplr.Character
        local root = character and character:FindFirstChild("HumanoidRootPart")
        if root then
            lastRootPartCFrame = root.CFrame
        end
    end
    updateState()
    
    local RLGL_Connection = ReplicatedStorage.Remotes.Effects.OnClientEvent:Connect(function(EffectsData)
        if EffectsData.EffectName ~= "TrafficLight" then return end
        isGreenLight = EffectsData.GreenLight == true
        updateState()
    end)
    Script.Temp.RLGL_Connection = RLGL_Connection
    
    local RLGL_OriginalNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local args = {...}
        local method = getnamecallmethod()
        if tostring(self) == "rootCFrame" and method == "FireServer" then
            if Toggles.RedLightGodmode and Toggles.RedLightGodmode.Value and not isGreenLight and lastRootPartCFrame then
                args[1] = lastRootPartCFrame
                return RLGL_OriginalNamecall(self, unpack(args))
            end
        end
        return RLGL_OriginalNamecall(self, ...)
    end)
    Script.Temp.RLGL_OriginalNamecall = RLGL_OriginalNamecall
    
    Script.Functions.Alert("Red Light Green Light Godmode Enabled", 3)
    return true
end

Script.Functions.DisableRedLightGodmode = function()
    if Script.Temp.RLGL_Connection then
        pcall(function() Script.Temp.RLGL_Connection:Disconnect() end)
        Script.Temp.RLGL_Connection = nil
    end
    if Script.Temp.RLGL_OriginalNamecall then
        hookmetamethod(game, "__namecall", Script.Temp.RLGL_OriginalNamecall)
        Script.Temp.RLGL_OriginalNamecall = nil
    end
    Script.Functions.Alert("Red Light Green Light Godmode Disabled", 3)
end

Script.Functions.CompleteRedLightGreenLight = function()
    if not workspace:FindFirstChild("RedLightGreenLight") then
        Script.Functions.Alert("Red Light Green Light game not running", 3)
        return
    end
    Script.Functions.WinRLGL()
    Script.Functions.Alert("Completed Red Light Green Light!", 3)
end

Script.Functions.CompleteGlassBridge = function()
    if not workspace:FindFirstChild("GlassBridge") then
        Script.Functions.Alert("Glass Bridge game not running", 3)
        return
    end
    Script.Functions.WinGlassBridge()
    Script.Functions.Alert("Completed Glass Bridge!", 3)
end

Script.Functions.RemoveInjuredWalking = function()
    if lplr.Character and lplr.Character:FindFirstChild("InjuredWalking") then
        lplr.Character.InjuredWalking:Destroy()
        Script.Functions.Alert("Removed Injured Walking effect", 3)
    end
    Script.Functions.BypassRagdoll()
end

Script.Functions.BypassDalgonaGame = function()
    local DalgonaGame = workspace:FindFirstChild("DalgonaGame")
    if not DalgonaGame then return end
    
    local DalgonaGameFolder = DalgonaGame:FindFirstChild("DalgonaGameFolder")
    if not DalgonaGameFolder then return end
    
    local DalgonaGameGUI = DalgonaGameFolder:FindFirstChild("DalgonaGameGUI")
    if not DalgonaGameGUI then return end
    
 
    for _, obj in pairs(DalgonaGameGUI:GetDescendants()) do
        if obj:IsA("GuiObject") then
            obj.Visible = false
        end
    end
    

    local shapes = DalgonaGameGUI:FindFirstChild("Shapes")
    local outlines = DalgonaGameGUI:FindFirstChild("Outlines")
    local picks = DalgonaGameGUI:FindFirstChild("Picks")
    local redDots = DalgonaGameGUI:FindFirstChild("RedDots")
    local progressBar = DalgonaGameGUI:FindFirstChild("ProgressBar")
    
    if shapes then
        for _, shape in pairs(shapes:GetChildren()) do
            if shape:IsA("GuiObject") then
                shape.Visible = false
            end
        end
    end
    
    if outlines then
        for _, outline in pairs(outlines:GetChildren()) do
            if outline:IsA("GuiObject") then
                outline.Visible = false
            end
        end
    end
    
    if picks then
        for _, pick in pairs(picks:GetChildren()) do
            if pick:IsA("GuiObject") then
                pick.Visible = false
            end
        end
    end
    
    if redDots then
        for _, dot in pairs(redDots:GetChildren()) do
            if dot:IsA("GuiObject") then
                dot.Visible = false
            end
        end
    end
    
    if progressBar then
        progressBar.Visible = false
    end
    

    local camera = workspace.CurrentCamera
    if camera then
        camera.CameraType = Enum.CameraType.Scriptable
        camera.CFrame = CFrame.new(Vector3.new(0, 50, 0), Vector3.new(0, 0, 0))
    end

    if lplr.Character then
        for _, part in pairs(lplr.Character:GetChildren()) do
            if part:IsA("BasePart") and part.Name ~= "HumanoidRootPart" then
                part.Transparency = 1
            end
        end
    end
    

    task.wait(0.5)
    Script.Functions.CompleteDalgonaGame()
    

    task.wait(1)
    Script.Functions.RestoreVisibility(lplr.Character)
    Script.Functions.FixCamera()
end

Script.Functions.GetDalgonaRemote = function()
    return game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("DALGONATEMPREMPTE")
end

Script.Functions.DisableAntiFling = function()

    Script.Temp.AntiFlingDisabled = true
    if Script.Temp.AntiFlingConnection then
        Script.Temp.AntiFlingConnection:Disconnect()
        Script.Temp.AntiFlingConnection = nil
    end
end

Script.Functions.EnableAntiFling = function()

    Script.Temp.AntiFlingDisabled = false
    if Toggles.AntiFling and Toggles.AntiFling.Value then
        Script.Temp.AntiFlingConnection = RunService.Heartbeat:Connect(function()
            local rootPart = Script.Functions.GetRootPart()
            if rootPart then
                rootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                rootPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
            end
        end)
    end
end

Script.Functions.CompleteDalgonaGame = function()
    local Effects = Script.Functions.SafeRequire(ReplicatedStorage.Modules.Effects) or {
        AnnouncementTween = function(args)
            Script.Functions.Alert(args.AnnouncementDisplayText, args.DisplayTime)
        end
    }
    
    local dalgonaGame = workspace:FindFirstChild("DalgonaGame") or workspace:FindFirstChild("Dalgona")
    if not dalgonaGame then
        Script.Functions.Alert("Dalgona Game not found!", 3)
        return
    end
    
    local completionPart = dalgonaGame:FindFirstChild("Completion") or dalgonaGame:FindFirstChild("Finish")
    if completionPart then
        local player = Players.LocalPlayer
        if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.CFrame = completionPart.CFrame
        end
    end
    
    Effects.AnnouncementTween({
        AnnouncementOneLine = true,
        FasterTween = true,
        DisplayTime = 5,
        AnnouncementDisplayText = "[RONIX]: Dalgona Game completed!"
    })
end

Script.Functions.OnLoad = function()
    local Effects = Script.Functions.SafeRequire(ReplicatedStorage.Modules.Effects) or {
        AnnouncementTween = function(args)
            Script.Functions.Alert(args.AnnouncementDisplayText, args.DisplayTime)
        end
    }
    
    Effects.AnnouncementTween({
        AnnouncementOneLine = true,
        FasterTween = true,
        DisplayTime = 5,
        AnnouncementDisplayText = "[RONIX]: RonixHub loaded successfully!"
    })
    
    Script.Functions.ScanForESP()
    Script.Functions.UpdateESP()
    
    Script.Functions.SetupOtherPlayerConnection()
    
    wait(1)
    Effects.AnnouncementTween({
        AnnouncementOneLine = true,
        FasterTween = true,
        DisplayTime = 3,
        AnnouncementDisplayText = "[RONIX]: Ronix Up to Date!"
    })
end

Script.Functions.JoinDiscordServer = function()
    local success, result = pcall(function()
        local inviteCode = "ronix"
        local inviteUrl = "https://discord.gg/" .. inviteCode
        
        local rpcSuccess = pcall(function()
            request({
                Url = "http://127.0.0.1:6463/rpc?v=1",
                Method = "POST",
                Headers = {
                    ["Content-Type"] = "application/json",
                    ["Origin"] = "https://discord.com"
                },
                Body = HttpService:JSONEncode({
                    cmd = "INVITE_BROWSER",
                    args = {
                        code = inviteCode
                    },
                    nonce = HttpService:GenerateGUID(false)
                })
            })
        end)
        
        if not rpcSuccess then
            setclipboard(inviteUrl)
            Script.Functions.Alert("Discord invite copied to clipboard!", 3)
        else
            Script.Functions.Alert("Opening Discord invite...", 3)
        end
    end)
    
    if not success then
        setclipboard("https://discord.gg/ronix")
        Script.Functions.Alert("Discord invite copied to clipboard!", 3)
    end
end

Script.Functions.BypassRagdoll = function()
    local player = Players.LocalPlayer
    if not player.Character then
        Script.Functions.Alert("No character found!", 3)
        return
    end
    
    for _, obj in pairs(player.Character:GetDescendants()) do
        if obj:IsA("BallSocketConstraint") or obj:IsA("HingeConstraint") or obj:IsA("WeldConstraint") then
            if obj.Name:find("Ragdoll") or obj.Name:find("ragdoll") then
                obj:Destroy()
            end
        end
    end
    
    local injuredWalking = player.Character:FindFirstChild("InjuredWalking")
    if injuredWalking then
        injuredWalking:Destroy()
    end
    
    local humanoid = player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.PlatformStand = false
        humanoid:ChangeState(Enum.HumanoidStateType.Running)
    end
    
    local rootPart = player.Character:FindFirstChild("HumanoidRootPart")
    if rootPart then
        rootPart.Anchored = false
        rootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
        rootPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
    end
    
    Script.Functions.Alert("Ragdoll bypassed successfully!", 3)
end

Script.Functions.WinRLGL = function()
    local Effects = Script.Functions.SafeRequire(ReplicatedStorage.Modules.Effects) or {
        AnnouncementTween = function(args)
            Script.Functions.Alert(args.AnnouncementDisplayText, args.DisplayTime)
        end
    }
    
    local redLightGreenLight = workspace:FindFirstChild("RedLightGreenLight")
    if not redLightGreenLight then
        Script.Functions.Alert("Red Light Green Light game not found!", 3)
        return
    end
    
    local finishLine = redLightGreenLight:FindFirstChild("FinishLine")
    if not finishLine then
        Script.Functions.Alert("Finish line not found!", 3)
        return
    end
    
    local player = Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = finishLine.CFrame + Vector3.new(0, 5, 0)
        
        Effects.AnnouncementTween({
            AnnouncementOneLine = true,
            FasterTween = true,
            DisplayTime = 5,
            AnnouncementDisplayText = "[RONIX]: Red Light Green Light completed!"
        })
    else
        Script.Functions.Alert("Character not found!", 3)
    end
end

Script.Functions.WinGlassBridge = function()
    local Effects = Script.Functions.SafeRequire(ReplicatedStorage.Modules.Effects) or {
        AnnouncementTween = function(args)
            Script.Functions.Alert(args.AnnouncementDisplayText, args.DisplayTime)
        end
    }
    
    local glassBridge = workspace:FindFirstChild("GlassBridge")
    if not glassBridge then
        Script.Functions.Alert("Glass Bridge game not found!", 3)
        return
    end
    
    local finishLine = glassBridge:FindFirstChild("FinishLine") or glassBridge:FindFirstChild("Finish")
    if not finishLine then
        Script.Functions.Alert("Glass Bridge finish line not found!", 3)
        return
    end
    
    local player = Players.LocalPlayer
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = finishLine.CFrame + Vector3.new(0, 5, 0)
        
        Effects.AnnouncementTween({
            AnnouncementOneLine = true,
            FasterTween = true,
            DisplayTime = 5,
            AnnouncementDisplayText = "[RONIX]: Glass Bridge completed!"
        })
    else
        Script.Functions.Alert("Character not found!", 3)
    end
end

Script.Functions.RevealGlassBridge = function()
    local Effects = Script.Functions.SafeRequire(ReplicatedStorage.Modules.Effects) or {
        AnnouncementTween = function(args)
            Script.Functions.Alert(args.AnnouncementDisplayText, args.DisplayTime)
        end
    }

    local glassHolder = workspace:FindFirstChild("GlassBridge") and workspace.GlassBridge:FindFirstChild("GlassHolder")
    if not glassHolder then
        warn("GlassHolder not found in workspace.GlassBridge")
        Script.Functions.Alert("Glass Bridge not found!", 3)
        return
    end

    for _, tilePair in pairs(glassHolder:GetChildren()) do
        for _, tileModel in pairs(tilePair:GetChildren()) do
            if tileModel:IsA("Model") and tileModel.PrimaryPart then
                local primaryPart = tileModel.PrimaryPart
                local isBreakable = primaryPart:GetAttribute("exploitingisevil") == true

                local targetColor = isBreakable and Color3.fromRGB(255, 0, 0) or Color3.fromRGB(0, 255, 0)
                local transparency = 0.5

                for _, part in pairs(tileModel:GetDescendants()) do
                    if part:IsA("BasePart") then
                        TweenService:Create(part, TweenInfo.new(0.5, Enum.EasingStyle.Linear), {
                            Transparency = transparency,
                            Color = targetColor
                        }):Play()
                    end
                end

                local highlight = Instance.new("Highlight")
                highlight.FillColor = targetColor
                highlight.FillTransparency = 0.7
                highlight.OutlineTransparency = 0.5
                highlight.Parent = tileModel
            end
        end
    end

    Effects.AnnouncementTween({
        AnnouncementOneLine = true,
        FasterTween = true,
        DisplayTime = 10,
        AnnouncementDisplayText = "[RONIX]: Safe tiles are green, breakable tiles are red!"
    })
end


function Script.Functions.FlingAura()
    if not Toggles.FlingAura or not Toggles.FlingAura.Value then return end
    
    local rootPart = Script.Functions.GetRootPart()
    if not rootPart then return end
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= lplr and player.Character then
            local targetRoot = player.Character:FindFirstChild("HumanoidRootPart")
            if targetRoot then
                local distance = (rootPart.Position - targetRoot.Position).Magnitude
                if distance <= 50 then 
                    local bodyVelocity = Instance.new("BodyVelocity")
                    bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
                    bodyVelocity.Velocity = (targetRoot.Position - rootPart.Position).Unit * 100
                    bodyVelocity.Parent = targetRoot
                    
                    game:GetService("Debris"):AddItem(bodyVelocity, 0.5)
                end
            end
        end
    end
end


function Script.Functions.EnhancedKillAura()
    if not Toggles.KillAura or not Toggles.KillAura.Value then return end
    
    local fork = Script.Functions.GetFork()
    if fork then
        Script.Functions.FireForkRemote()
        
    
        local remotes = {
            "UsedTool",
            "ToolActivated", 
            "WeaponFired",
            "AttackRemote"
        }
        
        for _, remoteName in pairs(remotes) do
            local remote = ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild(remoteName)
            if remote then
                pcall(function()
                    remote:FireServer(fork)
                end)
            end
        end
    end
end


function Script.Functions.PlayerESP(character)
    if not character or not character:FindFirstChild("HumanoidRootPart") then return end
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "PlayerESP"
    billboard.Adornee = character.HumanoidRootPart
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = character.HumanoidRootPart
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 1
    frame.Parent = billboard
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = character.Name
    textLabel.TextColor3 = ESP_META.PlayerESP.Color
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextSize = 16
    textLabel.Parent = frame
    
   
    local highlight = Instance.new("Highlight")
    highlight.Name = "PlayerESPHighlight"
    highlight.Adornee = character
    highlight.FillColor = ESP_META.PlayerESP.Color
    highlight.OutlineColor = ESP_META.PlayerESP.Color
    highlight.FillTransparency = 0.75
    highlight.OutlineTransparency = 0
    highlight.Parent = character
    
    if not Script.ESPTable.Player then
        Script.ESPTable.Player = {}
    end
    
    Script.ESPTable.Player[character] = {
        billboard = billboard,
        highlight = highlight,
        textLabel = textLabel
    }
end

function Script.Functions.KeyESP(key)
    if not key or not key:FindFirstChild("Handle") then return end
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "KeyESP"
    billboard.Adornee = key.Handle
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = key.Handle
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 1
    frame.Parent = billboard
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "Key"
    textLabel.TextColor3 = ESP_META.KeyESP.Color
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextSize = 16
    textLabel.Parent = frame
    
    local highlight = Instance.new("Highlight")
    highlight.Name = "KeyESPHighlight"
    highlight.Adornee = key
    highlight.FillColor = ESP_META.KeyESP.Color
    highlight.OutlineColor = ESP_META.KeyESP.Color
    highlight.FillTransparency = 0.75
    highlight.OutlineTransparency = 0
    highlight.Parent = key
    
    if not Script.ESPTable.Key then
        Script.ESPTable.Key = {}
    end
    
    Script.ESPTable.Key[key] = {
        billboard = billboard,
        highlight = highlight,
        textLabel = textLabel
    }
end

function Script.Functions.DoorESP(door)
    if not door or not door:FindFirstChild("Door") then return end
    
    local doorPart = door.Door
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "DoorESP"
    billboard.Adornee = doorPart
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = doorPart
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 1
    frame.Parent = billboard
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "Door"
    textLabel.TextColor3 = ESP_META.DoorESP.Color
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextSize = 16
    textLabel.Parent = frame
    
    local highlight = Instance.new("Highlight")
    highlight.Name = "DoorESPHighlight"
    highlight.Adornee = door
    highlight.FillColor = ESP_META.DoorESP.Color
    highlight.OutlineColor = ESP_META.DoorESP.Color
    highlight.FillTransparency = 0.75
    highlight.OutlineTransparency = 0
    highlight.Parent = door
    
    if not Script.ESPTable.Door then
        Script.ESPTable.Door = {}
    end
    
    Script.ESPTable.Door[door] = {
        billboard = billboard,
        highlight = highlight,
        textLabel = textLabel
    }
end

function Script.Functions.HiderESP(player)
    if not player.Character then return end
    Script.Functions.PlayerESP(player.Character)
end

function Script.Functions.SeekerESP(player)
    if not player.Character then return end
    Script.Functions.PlayerESP(player.Character)
end

function Script.Functions.GuardESP(guard)
    if not guard or not guard:FindFirstChild("HumanoidRootPart") then return end
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "GuardESP"
    billboard.Adornee = guard.HumanoidRootPart
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = guard.HumanoidRootPart
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 1
    frame.Parent = billboard
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = "Guard"
    textLabel.TextColor3 = ESP_META.GuardESP.Color
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextSize = 16
    textLabel.Parent = frame
    
    local highlight = Instance.new("Highlight")
    highlight.Name = "GuardESPHighlight"
    highlight.Adornee = guard
    highlight.FillColor = ESP_META.GuardESP.Color
    highlight.OutlineColor = ESP_META.GuardESP.Color
    highlight.FillTransparency = 0.75
    highlight.OutlineTransparency = 0
    highlight.Parent = guard
    
    if not Script.ESPTable.Guard then
        Script.ESPTable.Guard = {}
    end
    
    Script.ESPTable.Guard[guard] = {
        billboard = billboard,
        highlight = highlight,
        textLabel = textLabel
    }
end

function Script.Functions.SetupOtherPlayerConnection()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= lplr then
            if player.Character then
                if Toggles.PlayerESP and Toggles.PlayerESP.Value then
                    Script.Functions.PlayerESP(player.Character)
                end
            end
            
            player.CharacterAdded:Connect(function(character)
                if Toggles.PlayerESP and Toggles.PlayerESP.Value then
                    character:WaitForChild("HumanoidRootPart")
                    Script.Functions.PlayerESP(character)
                end
            end)
        end
    end
    
    Players.PlayerAdded:Connect(function(player)
        player.CharacterAdded:Connect(function(character)
            if Toggles.PlayerESP and Toggles.PlayerESP.Value then
                character:WaitForChild("HumanoidRootPart")
                Script.Functions.PlayerESP(character)
            end
        end)
    end)
end

function Script.Functions.DetectGameState()
    local gameState = "unknown"
    
    if workspace:FindFirstChild("RedLightGreenLightMap") then
        gameState = "RedLightGreenLight"
    elseif workspace:FindFirstChild("GlassBridgeMap") then
        gameState = "GlassBridge"
    elseif workspace:FindFirstChild("HideAndSeekMap") then
        gameState = "HideAndSeek"
    elseif workspace:FindFirstChild("DalgonaMap") then
        gameState = "Dalgona"
    elseif workspace:FindFirstChild("TugOfWarMap") then
        gameState = "TugOfWar"
    elseif workspace:FindFirstChild("MarbleMap") then
        gameState = "Marble"
    end
    
    if Script.GameState ~= gameState then
        Script.GameState = gameState
        Script.GameStateChanged:Fire(gameState)
        Script.Functions.Alert("Game State: " .. gameState, 3)
    end
end

function Script.Functions.AntiKick()
    local mt = getrawmetatable(game)
    local old = mt.__namecall
    setreadonly(mt, false)
    
    mt.__namecall = newcclosure(function(self, ...)
        local method = getnamecallmethod()
        if method == "Kick" then
            Script.Functions.Alert("Kick attempt blocked!", 5)
            return
        end
        return old(self, ...)
    end)
    
    setreadonly(mt, true)
end

function Script.Functions.AutoRejoin()
    game:GetService("CoreGui").RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
        if child.Name == 'ErrorPrompt' and child:FindFirstChild('MessageArea') and child.MessageArea:FindFirstChild('ErrorFrame') then
            game:GetService("TeleportService"):Teleport(game.PlaceId)
        end
    end)
end
function Script.Functions.CreateESP(obj, espType)
    if not obj or not obj:FindFirstChild("HumanoidRootPart") and not obj:IsA("Part") then return end
    
    local espData = ESP_META[espType]
    if not espData then return end
    
    local billboard = Instance.new("BillboardGui")
    billboard.Name = "ESP_" .. espType
    billboard.Adornee = obj:FindFirstChild("HumanoidRootPart") or obj
    billboard.Size = UDim2.new(0, 200, 0, 50)
    billboard.StudsOffset = Vector3.new(0, 2, 0)
    billboard.AlwaysOnTop = true
    billboard.Parent = obj
    
    local frame = Instance.new("Frame")
    frame.Size = UDim2.new(1, 0, 1, 0)
    frame.BackgroundTransparency = 1
    frame.Parent = billboard
    
    local textLabel = Instance.new("TextLabel")
    textLabel.Size = UDim2.new(1, 0, 1, 0)
    textLabel.BackgroundTransparency = 1
    textLabel.Text = espData.Text
    textLabel.TextColor3 = espData.Color
    textLabel.TextStrokeTransparency = 0
    textLabel.TextStrokeColor3 = Color3.new(0, 0, 0)
    textLabel.Font = Enum.Font.SourceSansBold
    textLabel.TextSize = 16
    textLabel.Parent = frame
    
    Script.ESPTable[obj] = {billboard = billboard, espType = espType}
end

function Script.Functions.RemoveESP(obj)
    if Script.ESPTable[obj] then
        if Script.ESPTable[obj].billboard then
            Script.ESPTable[obj].billboard:Destroy()
        end
        Script.ESPTable[obj] = nil
    end
end

function Script.Functions.UpdateESP()
    for obj, data in pairs(Script.ESPTable) do
        if obj and obj.Parent and data.billboard then
            local espData = ESP_META[data.espType]
            if espData and espData.Enabled then
                data.billboard.Frame.TextLabel.TextColor3 = espData.Color
                data.billboard.Enabled = true
            else
                data.billboard.Enabled = false
            end
        else
            Script.Functions.RemoveESP(obj)
        end
    end
end

function Script.Functions.ScanForESP()
    for _, obj in pairs(workspace:GetDescendants()) do
        for espType, espData in pairs(ESP_META) do
            if espData.Enabled and espData.checktype(obj) and not Script.ESPTable[obj] then
                Script.Functions.CreateESP(obj, espType)
            end
        end
    end
end


function Script.Functions.AutoWin()
    if not Toggles.AutoWin or not Toggles.AutoWin.Value then return end
    
  
    for _, obj in pairs(workspace:GetDescendants()) do
        if obj.Name:find("Exit") or obj.Name:find("Escape") or obj.Name:find("Win") then
            if obj:IsA("Part") and obj.Touched then
                local rootPart = Script.Functions.GetRootPart()
                if rootPart then
                    rootPart.CFrame = obj.CFrame
                    wait(0.1)
                end
            end
        end
    end
end


function Script.Functions.CheckForAdmins()
    if not Toggles.AntiAdmin or not Toggles.AntiAdmin.Value then return end
    
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= lplr then
          
            local success, result = pcall(function()
                return player:GetRankInGroup(1) 
            end)
            
            if success and result > 100 then 
                Script.Functions.Alert("Admin detected: " .. player.Name, 5)
            end
        end
    end
end


local Window = WindUI:CreateWindow({
    Title = "RonixHub - Ink Game",
    Icon = "rbxassetid://136256350192953",
    Author = "Devs -Habibibloxberg11_",
    Folder = "RonixFolder",
    Size = UDim2.fromOffset(580, 460),
    Transparent = true,
    Theme = "Violet",
    SideBarWidth = 170,
    HasOutline = true
})


local Tabs = {
    Information = Window:Tab({ Title = "Information", Icon = "info" }),
    Main = Window:Tab({ Title = "Main", Icon = "home" }),
    Player = Window:Tab({ Title = "Player", Icon = "user" }),
    Visuals = Window:Tab({ Title = "Visuals", Icon = "eye" }),
    Security = Window:Tab({ Title = "Security", Icon = "shield" }),
    Performance = Window:Tab({ Title = "Performance", Icon = "zap" }),
    Rebel = Window:Tab({ Title = "Rebel", Icon = "sword" }),
}


Tabs.Main:Toggle({
    Title = "Auto Win (All)",
    Value = false,
    Callback = function(value)
        Toggles.AutoWin = { Value = value }
        if value then
            Script.Functions.Alert("Auto Win Enabled", 3)
            Script.Temp.AutoWinConnection = RunService.Heartbeat:Connect(Script.Functions.AutoWin)
        else
            Script.Functions.Alert("Auto Win Disabled", 3)
            if Script.Temp.AutoWinConnection then
                Script.Temp.AutoWinConnection:Disconnect()
                Script.Temp.AutoWinConnection = nil
            end
        end
    end
})

Tabs.Main:Toggle({
    Title = "Anti Fling",
    Value = false,
    Callback = function(value)
        Toggles.AntiFling = { Value = value }
        if value then
            Script.Functions.Alert("Anti Fling Enabled", 3)
            Script.Temp.AntiFlingConnection = RunService.Heartbeat:Connect(function()
                local rootPart = Script.Functions.GetRootPart()
                if rootPart then
                    rootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)
                    rootPart.AssemblyAngularVelocity = Vector3.new(0, 0, 0)
                end
            end)
        else
            Script.Functions.Alert("Anti Fling Disabled", 3)
            if Script.Temp.AntiFlingConnection then
                Script.Temp.AntiFlingConnection:Disconnect()
                Script.Temp.AntiFlingConnection = nil
            end
        end
    end
})

Tabs.Main:Toggle({
    Title = "Fling Aura",
    Value = false,
    Callback = function(value)
        Toggles.FlingAura = { Value = value }
        if value then
            Script.Functions.Alert("Fling Aura Enabled", 3)
            Script.Temp.FlingAuraConnection = RunService.Heartbeat:Connect(function()
                Script.Functions.FlingAura()
            end)
        else
            Script.Functions.Alert("Fling Aura Disabled", 3)
            if Script.Temp.FlingAuraConnection then
                Script.Temp.FlingAuraConnection:Disconnect()
                Script.Temp.FlingAuraConnection = nil
            end
        end
    end
})

Tabs.Main:Button({
    Title = "Bypass Dalgona Game",
    Callback = function()
        Script.Functions.BypassDalgonaGame()
        Script.Functions.Alert("Attempting to bypass Dalgona Game...", 3)
    end,
})

Tabs.Main:Button({
    Title = "Complete Red Light / Green Light",
    Callback = function()
        Script.Functions.WinRLGL()
    end,
})

Tabs.Main:Button({
    Title = "Complete Glass Bridge",
    Callback = function()
        Script.Functions.WinGlassBridge()
    end,
})

Tabs.Main:Button({
    Title = "Reveal Glass Bridge",
    Callback = function()
        Script.Functions.RevealGlassBridge()
    end,
})

Tabs.Main:Button({
    Title = "Fix Camera",
    Callback = function()
        Script.Functions.FixCamera()
        Script.Functions.Alert("Camera fixed!", 2)
    end,
})

Tabs.Main:Button({
    Title = "Teleport Safe",
    Callback = function()
        Script.Functions.TeleportSafe()
        Script.Functions.Alert("Teleported to safe location!", 2)
    end,
})

Tabs.Player:Toggle({
    Title = "Speed",
    Value = false,
    Callback = function(value)
        Toggles.Speed = { Value = value }
        local humanoid = Script.Functions.GetHumanoid()
        if humanoid then
            if value then
                Script.Temp.OldWalkSpeed = humanoid.WalkSpeed
                Script.Functions.Alert("Speed Enabled (50)", 3)
                humanoid.WalkSpeed = 50
                
                Script.Temp.SpeedConnection = RunService.Heartbeat:Connect(function()
                    local hum = Script.Functions.GetHumanoid()
                    if hum and Toggles.Speed and Toggles.Speed.Value then
                        hum.WalkSpeed = 50
                    end
                end)
            else
                humanoid.WalkSpeed = Script.Temp.OldWalkSpeed or 16
                Script.Functions.Alert("Speed Disabled", 3)
                
                if Script.Temp.SpeedConnection then
                    Script.Temp.SpeedConnection:Disconnect()
                    Script.Temp.SpeedConnection = nil
                end
            end
        end
    end
})

Tabs.Player:Toggle({
    Title = "Noclip",
    Value = false,
    Callback = function(value)
        Toggles.Noclip = { Value = value }
        if value then
            Script.Functions.Alert("Noclip Enabled", 3)
            Script.Temp.NoclipConnection = RunService.Stepped:Connect(function()
                if lplr.Character then
                    for _, part in pairs(lplr.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            Script.Functions.Alert("Noclip Disabled", 3)
            if Script.Temp.NoclipConnection then
                Script.Temp.NoclipConnection:Disconnect()
                Script.Temp.NoclipConnection = nil
            end
            if lplr.Character then
                for _, part in pairs(lplr.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = part.Name ~= "HumanoidRootPart"
                    end
                end
            end
        end
    end
})

Tabs.Player:Toggle({
    Title = "Infinite Jump",
    Value = false,
    Callback = function(value)
        Toggles.InfiniteJump = { Value = value }
        if value then
            Script.Functions.Alert("Infinite Jump Enabled", 3)
            Script.Temp.InfiniteJumpConnection = UserInputService.JumpRequest:Connect(function()
                local humanoid = Script.Functions.GetHumanoid()
                if humanoid then
                    humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                end
            end)
        else
            Script.Functions.Alert("Infinite Jump Disabled", 3)
            if Script.Temp.InfiniteJumpConnection then
                Script.Temp.InfiniteJumpConnection:Disconnect()
                Script.Temp.InfiniteJumpConnection = nil
            end
        end
    end
})

Tabs.Player:Toggle({
    Title = "Fly",
    Value = false,
    Callback = function(value)
        Toggles.Fly = { Value = value }
        if value then
            Script.Functions.Alert("Fly Enabled", 3)
            
            local humanoid = Script.Functions.GetHumanoid()
            local rootPart = Script.Functions.GetRootPart()
            if not humanoid or not rootPart then return end
            
            Script.Temp.OldGravity = workspace.Gravity
            Script.Temp.OldJumpPower = humanoid.JumpPower
            
            workspace.Gravity = 0
            humanoid.JumpPower = 0
            
            local bodyVelocity = Instance.new("BodyVelocity")
            bodyVelocity.MaxForce = Vector3.new(4000, 4000, 4000)
            bodyVelocity.Velocity = Vector3.new(0, 0, 0)
            bodyVelocity.Parent = rootPart
            Script.Temp.FlyBodyVelocity = bodyVelocity
            
            Script.Temp.FlyConnection = RunService.Heartbeat:Connect(function()
                local camera = workspace.CurrentCamera
                local moveDirection = Vector3.new(0, 0, 0)
                
                if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                    moveDirection = moveDirection + camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                    moveDirection = moveDirection - camera.CFrame.LookVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                    moveDirection = moveDirection - camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                    moveDirection = moveDirection + camera.CFrame.RightVector
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.Space) then
                    moveDirection = moveDirection + Vector3.new(0, 1, 0)
                end
                if UserInputService:IsKeyDown(Enum.KeyCode.LeftShift) then
                    moveDirection = moveDirection - Vector3.new(0, 1, 0)
                end
                
                if moveDirection.Magnitude > 0 then
                    moveDirection = moveDirection.Unit * (humanoid.WalkSpeed or 16)
                end
                
                if bodyVelocity then
                    bodyVelocity.Velocity = moveDirection
                end
            end)
            
            Script.Temp.FlyNoclipConnection = RunService.Stepped:Connect(function()
                if lplr.Character then
                    for _, part in pairs(lplr.Character:GetDescendants()) do
                        if part:IsA("BasePart") and part.CanCollide then
                            part.CanCollide = false
                        end
                    end
                end
            end)
        else
            Script.Functions.Alert("Fly Disabled", 3)
            
            if Script.Temp.OldGravity then
                workspace.Gravity = Script.Temp.OldGravity
                Script.Temp.OldGravity = nil
            end
            
            local humanoid = Script.Functions.GetHumanoid()
            if humanoid and Script.Temp.OldJumpPower then
                humanoid.JumpPower = Script.Temp.OldJumpPower
                Script.Temp.OldJumpPower = nil
            end
            
            if Script.Temp.FlyBodyVelocity then
                Script.Temp.FlyBodyVelocity:Destroy()
                Script.Temp.FlyBodyVelocity = nil
            end
            
            if Script.Temp.FlyConnection then
                Script.Temp.FlyConnection:Disconnect()
                Script.Temp.FlyConnection = nil
            end
            if Script.Temp.FlyNoclipConnection then
                Script.Temp.FlyNoclipConnection:Disconnect()
                Script.Temp.FlyNoclipConnection = nil
            end
            
           
            if lplr.Character then
                for _, part in pairs(lplr.Character:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = part.Name ~= "HumanoidRootPart"
                    end
                end
            end
        end
    end
})


Tabs.Visuals:Toggle({
    Title = "Player ESP",
    Value = false,
    Callback = function(value)
        Toggles.PlayerESP = { Value = value }
        ESP_META.PlayerESP.Enabled = value
        if value then
            Script.Functions.Alert("Player ESP Enabled", 3)
        else
            Script.Functions.Alert("Player ESP Disabled", 3)
        end
        Script.Functions.UpdateESP()
    end
})

Tabs.Visuals:Toggle({
    Title = "Guard ESP",
    Value = false,
    Callback = function(value)
        Toggles.GuardESP = { Value = value }
        ESP_META.GuardESP.Enabled = value
        if value then
            Script.Functions.Alert("Guard ESP Enabled", 3)
        else
            Script.Functions.Alert("Guard ESP Disabled", 3)
        end
        Script.Functions.UpdateESP()
    end
})

Tabs.Visuals:Toggle({
    Title = "Hider ESP",
    Value = false,
    Callback = function(value)
        Toggles.HiderESP = { Value = value }
        ESP_META.HiderESP.Enabled = value
        if value then
            Script.Functions.Alert("Hider ESP Enabled", 3)
        else
            Script.Functions.Alert("Hider ESP Disabled", 3)
        end
        Script.Functions.UpdateESP()
    end
})

Tabs.Visuals:Toggle({
    Title = "Seeker ESP",
    Value = false,
    Callback = function(value)
        Toggles.SeekerESP = { Value = value }
        ESP_META.SeekerESP.Enabled = value
        if value then
            Script.Functions.Alert("Seeker ESP Enabled", 3)
        else
            Script.Functions.Alert("Seeker ESP Disabled", 3)
        end
        Script.Functions.UpdateESP()
    end
})

Tabs.Visuals:Toggle({
    Title = "Key ESP",
    Value = false,
    Callback = function(value)
        Toggles.KeyESP = { Value = value }
        ESP_META.KeyESP.Enabled = value
        if value then
            Script.Functions.Alert("Key ESP Enabled", 3)
        else
            Script.Functions.Alert("Key ESP Disabled", 3)
        end
        Script.Functions.UpdateESP()
    end
})

Tabs.Visuals:Toggle({
    Title = "Door ESP",
    Value = false,
    Callback = function(value)
        Toggles.DoorESP = { Value = value }
        ESP_META.DoorESP.Enabled = value
        if value then
            Script.Functions.Alert("Door ESP Enabled", 3)
        else
            Script.Functions.Alert("Door ESP Disabled", 3)
        end
        Script.Functions.UpdateESP()
    end
})


Tabs.Visuals:Colorpicker({
    Title = "Player ESP Color",
    Default = ESP_META.PlayerESP.Color,
    Callback = function(color)
        ESP_META.PlayerESP.Color = color
        Script.Functions.UpdateESP()
    end
})

Tabs.Visuals:Colorpicker({
    Title = "Guard ESP Color",
    Default = ESP_META.GuardESP.Color,
    Callback = function(color)
        ESP_META.GuardESP.Color = color
        Script.Functions.UpdateESP()
    end
})

Tabs.Visuals:Colorpicker({
    Title = "Hider ESP Color",
    Default = ESP_META.HiderESP.Color,
    Callback = function(color)
        ESP_META.HiderESP.Color = color
        Script.Functions.UpdateESP()
    end
})

Tabs.Visuals:Colorpicker({
    Title = "Seeker ESP Color",
    Default = ESP_META.SeekerESP.Color,
    Callback = function(color)
        ESP_META.SeekerESP.Color = color
        Script.Functions.UpdateESP()
    end
})

Tabs.Visuals:Colorpicker({
    Title = "Key ESP Color",
    Default = ESP_META.KeyESP.Color,
    Callback = function(color)
        ESP_META.KeyESP.Color = color
        Script.Functions.UpdateESP()
    end
})

Tabs.Visuals:Colorpicker({
    Title = "Door ESP Color",
    Default = ESP_META.DoorESP.Color,
    Callback = function(color)
        ESP_META.DoorESP.Color = color
        Script.Functions.UpdateESP()
    end
})


Tabs.Security:Toggle({
    Title = "Anti AFK",
    Value = false,
    Callback = function(value)
        Toggles.AntiAFK = { Value = value }
        if value then
            Script.Functions.Alert("Anti AFK Enabled", 3)
            Script.Temp.AntiAFKConnection = RunService.Heartbeat:Connect(function()
                VirtualUser:CaptureController()
                VirtualUser:ClickButton2(Vector2.new())
            end)
        else
            Script.Functions.Alert("Anti AFK Disabled", 3)
            if Script.Temp.AntiAFKConnection then
                Script.Temp.AntiAFKConnection:Disconnect()
                Script.Temp.AntiAFKConnection = nil
            end
        end
    end
})

Tabs.Security:Toggle({
    Title = "Anti Admin",
    Value = false,
    Callback = function(value)
        Toggles.AntiAdmin = { Value = value }
        if value then
            Script.Functions.Alert("Anti Admin Enabled", 3)
            Script.Temp.AntiAdminConnection = RunService.Heartbeat:Connect(Script.Functions.CheckForAdmins)
        else
            Script.Functions.Alert("Anti Admin Disabled", 3)
            if Script.Temp.AntiAdminConnection then
                Script.Temp.AntiAdminConnection:Disconnect()
                Script.Temp.AntiAdminConnection = nil
            end
        end
    end
})

Tabs.Security:Toggle({
    Title = "Anti Kick",
    Value = false,
    Callback = function(value)
        Toggles.AntiKick = { Value = value }
        if value then
            Script.Functions.Alert("Anti Kick Enabled", 3)
            Script.Functions.AntiKick()
        else
            Script.Functions.Alert("Anti Kick Disabled", 3)
        end
    end
})

Tabs.Security:Toggle({
    Title = "Auto Rejoin",
    Value = false,
    Callback = function(value)
        Toggles.AutoRejoin = { Value = value }
        if value then
            Script.Functions.Alert("Auto Rejoin Enabled", 3)
            Script.Functions.AutoRejoin()
        else
            Script.Functions.Alert("Auto Rejoin Disabled", 3)
        end
    end
})

Tabs.Performance:Toggle({
    Title = "Low GFX",
    Value = false,
    Callback = function(value)
        Toggles.LowGFX = { Value = value }
        if value then
            Script.Functions.Alert("Low GFX Enabled", 3)
            Script.Temp.OldLightingSettings = {
                Brightness = Lighting.Brightness,
                GlobalShadows = Lighting.GlobalShadows,
                FogEnd = Lighting.FogEnd,
                FogStart = Lighting.FogStart
            }
            Lighting.Brightness = 1
            Lighting.GlobalShadows = false
            Lighting.FogEnd = 100
            Lighting.FogStart = 0
            settings().Rendering.QualityLevel = 1
        else
            Script.Functions.Alert("Low GFX Disabled", 3)
            if Script.Temp.OldLightingSettings then
                Lighting.Brightness = Script.Temp.OldLightingSettings.Brightness
                Lighting.GlobalShadows = Script.Temp.OldLightingSettings.GlobalShadows
                Lighting.FogEnd = Script.Temp.OldLightingSettings.FogEnd
                Lighting.FogStart = Script.Temp.OldLightingSettings.FogStart
                Script.Temp.OldLightingSettings = nil
            end
            settings().Rendering.QualityLevel = 10
        end
    end
})

Tabs.Performance:Toggle({
    Title = "Disable Effects",
    Value = false,
    Callback = function(value)
        Toggles.DisableEffects = { Value = value }
        if value then
            Script.Functions.Alert("Effects Disabled", 3)
            for _, effect in pairs(workspace:GetDescendants()) do
                if effect:IsA("ParticleEmitter") or effect:IsA("Smoke") or effect:IsA("Fire") or effect:IsA("Sparkles") then
                    effect.Enabled = false
                end
            end
        else
            Script.Functions.Alert("Effects Enabled", 3)
            for _, effect in pairs(workspace:GetDescendants()) do
                if effect:IsA("ParticleEmitter") or effect:IsA("Smoke") or effect:IsA("Fire") or effect:IsA("Sparkles") then
                    effect.Enabled = true
                end
            end
        end
    end
})

Tabs.Performance:Button({
    Title = "Clear Effects Cache",
    Callback = function()
        for _, effect in pairs(workspace:GetDescendants()) do
            if effect:IsA("ParticleEmitter") or effect:IsA("Smoke") or effect:IsA("Fire") or effect:IsA("Sparkles") then
                effect:Destroy()
            end
        end
        Script.Functions.Alert("Effects Cache Cleared", 3)
    end
})


Tabs.Rebel:Toggle({
    Title = "Expand Guard Hitbox",
    Value = false,
    Callback = function(value)
        Toggles.ExpandHitbox = { Value = value }
        if value then
            Script.Functions.Alert("Guard Hitbox Expanded", 3)
            Script.Temp.HitboxConnection = RunService.Heartbeat:Connect(function()
                for _, obj in pairs(workspace:GetDescendants()) do
                    if obj.Name:find("Guard") or obj.Name:find("NPC") then
                        local head = obj:FindFirstChild("Head")
                        if head and head:IsA("BasePart") then
                            head.Size = Vector3.new(10, 10, 10)
                            head.Transparency = 0.5
                            head.BrickColor = BrickColor.new("Bright red")
                        end
                    end
                end
            end)
        else
            Script.Functions.Alert("Guard Hitbox Restored", 3)
            if Script.Temp.HitboxConnection then
                Script.Temp.HitboxConnection:Disconnect()
                Script.Temp.HitboxConnection = nil
            end
            for _, obj in pairs(workspace:GetDescendants()) do
                if obj.Name:find("Guard") or obj.Name:find("NPC") then
                    local head = obj:FindFirstChild("Head")
                    if head and head:IsA("BasePart") then
                        head.Size = Vector3.new(2, 1, 1)
                        head.Transparency = 0
                        head.BrickColor = BrickColor.new("Light orange")
                    end
                end
            end
        end
    end
})

Tabs.Rebel:Toggle({
    Title = "Kill Aura",
    Value = false,
    Callback = function(value)
        Toggles.KillAura = { Value = value }
        if value then
            Script.Functions.Alert("Kill Aura Enabled", 3)
            Script.Temp.KillAuraConnection = RunService.Heartbeat:Connect(function()
                Script.Functions.EnhancedKillAura()
            end)
        else
            Script.Functions.Alert("Kill Aura Disabled", 3)
            if Script.Temp.KillAuraConnection then
                Script.Temp.KillAuraConnection:Disconnect()
                Script.Temp.KillAuraConnection = nil
            end
        end
    end
})

Tabs.Rebel:Button({
    Title = "Bypass Ragdoll",
    Callback = function()
        Script.Functions.BypassRagdoll()
        Script.Functions.Alert("Ragdoll bypassed!", 2)
    end,
})


Tabs.Information:Paragraph({
    Title = "",
    Desc = "",
    Image = "rbxassetid://136256350192953",
    ImageSize = 150
})

Tabs.Information:Button({
    Title = "Join Discord",
    Callback = function()
        pcall(function()
            setclipboard("discord.gg/ronix")
        end)
        game:GetService("StarterGui"):SetCore("SendNotification", {
            Title = "RONIX Discord - discord.gg/ronix",
            Text = "Copied to clipboard (discord.gg/ronix)",
            Duration = 10,
        })
    end
})


Tabs.Information:Paragraph({
    Title = "Info",
    Desc = "Join RonixHub today!\nInkGame Dev : Habibibloxberg11_/Habibi\nPlease open a ticket and ping Habibi if there is any Bugs"
})


Tabs.UISettings:Button({
    Title = "Unload Script",
    Callback = function()
        
        for _, connection in pairs(Script.Temp) do
            if typeof(connection) == "RBXScriptConnection" then
                connection:Disconnect()
            elseif typeof(connection) == "Instance" then
                connection:Destroy()
            end
        end
        
     
        for obj, _ in pairs(Script.ESPTable) do
            Script.Functions.RemoveESP(obj)
        end
        
       
        if Script.Temp.OldGravity then
            workspace.Gravity = Script.Temp.OldGravity
        end
        
        if Script.Temp.OldLightingSettings then
            Lighting.Brightness = Script.Temp.OldLightingSettings.Brightness
            Lighting.GlobalShadows = Script.Temp.OldLightingSettings.GlobalShadows
            Lighting.FogEnd = Script.Temp.OldLightingSettings.FogEnd
            Lighting.FogStart = Script.Temp.OldLightingSettings.FogStart
        end
        
        Script.Functions.Alert("RonixHub Unloaded Successfully", 5, true)
        Window:Destroy()
    end
})


Script.Temp.ESPScanConnection = RunService.Heartbeat:Connect(function()
    Script.Functions.ScanForESP()
    Script.Functions.UpdateESP()
end)

Script.Functions.SetupOtherPlayerConnection()


lplr.CharacterAdded:Connect(function(character)
    character:WaitForChild("HumanoidRootPart")
    wait(1) 
    

    if Toggles.Speed and Toggles.Speed.Value then
        local humanoid = Script.Functions.GetHumanoid()
        if humanoid then
            humanoid.WalkSpeed = 50
            
            
            if Script.Temp.SpeedConnection then
                Script.Temp.SpeedConnection:Disconnect()
            end
            Script.Temp.SpeedConnection = RunService.Heartbeat:Connect(function()
                local hum = Script.Functions.GetHumanoid()
                if hum and Toggles.Speed and Toggles.Speed.Value then
                    hum.WalkSpeed = 50
                end
            end)
        end
    end
    

    if Toggles.Noclip and Toggles.Noclip.Value then
  
        task.wait(0.5)
        Toggles.Noclip.Value = false
        task.wait(0.1)
        Toggles.Noclip.Value = true
    end
    

    if Toggles.Fly and Toggles.Fly.Value then

        task.wait(0.5)
        Toggles.Fly.Value = false
        task.wait(0.1)
        Toggles.Fly.Value = true
    end
end)


Script.Functions.OnLoad()
Script.Functions.Alert("Ronix Up to Date!", 5, true)
